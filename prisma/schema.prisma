generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  ACTIVE
  DEACTIVATED
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model CartItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String   @db.ObjectId
  quantity  Int      @default(1)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  name        String
  description String?
  category    String
  price       Float
  imageUrl    String?
  downloadUrl String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isHidden    Boolean  @default(false)
  supplierId  String?   @db.ObjectId
  supplier    Supplier? @relation(fields: [supplierId], references: [id])

  CartItem    CartItem[]
  OrderItem   OrderItem[]
  purchaseOrderItems PurchaseOrderItem[]
}

model Order {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  email     String
  total     Float
  status    String   @default("completed")
  createdAt DateTime @default(now())

  items     OrderItem[]
}

model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String   @db.ObjectId
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String   @db.ObjectId
  quantity  Int
  price     Float
}

model AppUser {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  email         String?
  displayName   String?
  authMethod    String?
  status        UserStatus @default(ACTIVE)
  blockedAt     DateTime?
  blockReason   String?
  deactivatedAt DateTime?
  lastActiveAt  DateTime?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@index([email])
  @@index([status])
}

model Supplier {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String?
  phone          String?
  address        String?
  note           String?
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  products       Product[]
  purchaseOrders PurchaseOrder[]
  @@index([name])
}

model PurchaseOrder {
  id          String             @id @default(auto()) @map("_id") @db.ObjectId
  supplier    Supplier           @relation(fields: [supplierId], references: [id])
  supplierId  String             @db.ObjectId
  orderDate   DateTime           @default(now())
  status      String             @default("Pending")
  items       PurchaseOrderItem[]
  note        String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

model PurchaseOrderItem {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  purchaseOrder   PurchaseOrder  @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId String         @db.ObjectId
  product         Product?        @relation(fields: [productId], references: [id])
  productId       String         @db.ObjectId
  quantity        Int
  price           Float
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([purchaseOrderId])
}