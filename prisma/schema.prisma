generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  ACTIVE
  DEACTIVATED
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model CartItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @db.ObjectId
  quantity  Int     @default(1)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  name        String
  description String?
  category    String
  price       Float
  imageUrl    String?
  downloadUrl String?
  isHidden    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  supplierId String?   @db.ObjectId
  supplier   Supplier? @relation(fields: [supplierId], references: [id])

  CartItem           CartItem[]
  OrderItem          OrderItem[]
  purchaseOrderItems PurchaseOrderItem[]
  transactions       PurchaseOrderTransaction[]
  returnItems        PurchaseReturnItem[]
}

model Order {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  email     String
  total     Float
  status    String   @default("completed")
  createdAt DateTime @default(now())

  items OrderItem[]
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String  @db.ObjectId
  quantity  Int
  price     Float
}

model AppUser {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  email         String?
  displayName   String?
  authMethod    String?
  status        UserStatus @default(ACTIVE)
  blockedAt     DateTime?
  blockReason   String?
  deactivatedAt DateTime?
  lastActiveAt  DateTime?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@index([email])
  @@index([status])
}

model Supplier {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String?
  phone          String?
  address        String?
  note           String?
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  products       Product[]
  purchaseOrders PurchaseOrder[]

  @@index([name])
}

model PurchaseOrder {
  id            String                     @id @default(auto()) @map("_id") @db.ObjectId
  supplier      Supplier                   @relation(fields: [supplierId], references: [id])
  supplierId    String                     @db.ObjectId
  orderDate     DateTime                   @default(now())
  expectedDate  DateTime?
  receivedDate  DateTime?
  status        String                     @default("Pending")
  items         PurchaseOrderItem[]
  note          String?
  invoiceNumber String?
  invoiceDate   DateTime?
  totalAmount   Float                      @default(0)
  createdAt     DateTime                   @default(now())
  updatedAt     DateTime                   @updatedAt
  documents     PurchaseOrderDocument[]
  transactions  PurchaseOrderTransaction[]
  returns       PurchaseReturn[]

  @@map("purchase_orders")
}

model PurchaseOrderItem {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  purchaseOrder     PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId   String        @db.ObjectId
  product           Product?      @relation(fields: [productId], references: [id])
  productId         String        @db.ObjectId
  quantity          Int
  receivedQuantity  Int           @default(0)
  backorderQuantity Int           @default(0)
  price             Float
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  transactions PurchaseOrderTransaction[]

  @@index([purchaseOrderId])
  @@map("purchase_order_items")
}

model PurchaseOrderDocument {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  purchaseOrderId String        @db.ObjectId
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)

  fileName    String
  fileUrl     String
  fileType    String
  fileSize    Int
  description String?
  uploadedBy  String?

  createdAt DateTime @default(now())

  @@map("purchase_order_documents")
}

model PurchaseOrderTransaction {
  id                  String            @id @default(auto()) @map("_id") @db.ObjectId
  purchaseOrderId     String            @db.ObjectId
  purchaseOrder       PurchaseOrder     @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  purchaseOrderItemId String            @db.ObjectId
  purchaseOrderItem   PurchaseOrderItem @relation(fields: [purchaseOrderItemId], references: [id], onDelete: Cascade)
  productId           String            @db.ObjectId
  product             Product           @relation(fields: [productId], references: [id])

  type          String
  quantity      Int
  previousStock Int
  newStock      Int
  note          String?
  createdBy     String?
  createdAt     DateTime @default(now())

  @@map("purchase_order_transactions")
}

model PurchaseReturn {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  purchaseOrderId String        @db.ObjectId
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])

  returnDate   DateTime @default(now())
  reason       String
  status       String // Pending, Approved, Completed, Rejected
  refundAmount Float    @default(0)
  note         String?

  createdBy String // user email or id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  items PurchaseReturnItem[]

  @@map("purchase_returns")
}

model PurchaseReturnItem {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  purchaseReturnId String         @db.ObjectId
  purchaseReturn   PurchaseReturn @relation(fields: [purchaseReturnId], references: [id], onDelete: Cascade)
  productId        String         @db.ObjectId
  product          Product        @relation(fields: [productId], references: [id])

  quantity Int
  price    Float
  reason   String?

  createdAt DateTime @default(now())

  @@map("purchase_return_items")
}
