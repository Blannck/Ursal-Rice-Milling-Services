generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  ACTIVE
  DEACTIVATED
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model CartItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @db.ObjectId
  quantity  Int     @default(1)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id                 String                 @id @default(auto()) @map("_id") @db.ObjectId
  userId             String
  name               String
  description        String?
  category           String
  price              Float
  imageUrl           String?
  downloadUrl        String?
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
  isHidden           Boolean                @default(false)
  supplierId         String?                @db.ObjectId
  supplier           Supplier?              @relation(fields: [supplierId], references: [id])
  stockOnHand        Int                    @default(0)
  stockOnOrder       Int                    @default(0)
  stockAllocated     Int                    @default(0)
  reorderPoint       Int                    @default(0)
  CartItem           CartItem[]
  OrderItem          OrderItem[]
  purchaseOrderItems PurchaseOrderItem[]
  InventoryTxn       InventoryTransaction[]
}

model Order {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  email     String
  total     Float
  status    String   @default("completed")
  createdAt DateTime @default(now())

  items OrderItem[]
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String  @db.ObjectId
  quantity  Int
  price     Float
}

model AppUser {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  email         String?
  displayName   String?
  authMethod    String?
  status        UserStatus @default(ACTIVE)
  blockedAt     DateTime?
  blockReason   String?
  deactivatedAt DateTime?
  lastActiveAt  DateTime?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@index([email])
  @@index([status])
}

model Supplier {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String?
  phone          String?
  address        String?
  note           String?
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  products       Product[]
  purchaseOrders PurchaseOrder[]

  @@index([name])
}

model PurchaseOrder {
  id         String              @id @default(auto()) @map("_id") @db.ObjectId
  supplier   Supplier            @relation(fields: [supplierId], references: [id])
  supplierId String              @db.ObjectId
  orderDate  DateTime            @default(now())
  status     String              @default("Pending")
  items      PurchaseOrderItem[]
  note       String?
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt

  attachments PurchaseOrderAttachment[]
  returns     PurchaseReturn[]
}

model PurchaseOrderItem {
  id              String               @id @default(auto()) @map("_id") @db.ObjectId
  purchaseOrder   PurchaseOrder        @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId String               @db.ObjectId
  product         Product?             @relation(fields: [productId], references: [id])
  productId       String               @db.ObjectId
  orderedQty      Int
  receivedQty     Int                  @default(0)
  returnedQty     Int                  @default(0)
  price           Float
  lineStatus      String               @default("Pending")
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  backorders      Backorder[]
  returnItems     PurchaseReturnItem[]

  @@index([purchaseOrderId])
  @@index([productId])
}

model PurchaseOrderAttachment {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId String        @db.ObjectId
  type            String // INVOICE | RECEIPT | OTHER
  fileName        String
  fileUrl         String
  uploadedAt      DateTime      @default(now())
  note            String?
}

model Backorder {
  id                  String            @id @default(auto()) @map("_id") @db.ObjectId
  purchaseOrderItem   PurchaseOrderItem @relation(fields: [purchaseOrderItemId], references: [id])
  purchaseOrderItemId String            @db.ObjectId
  quantity            Int
  expectedDate        DateTime?
  status              String            @default("Open")
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  @@index([purchaseOrderItemId])
}

model PurchaseReturn {
  id              String               @id @default(auto()) @map("_id") @db.ObjectId
  purchaseOrder   PurchaseOrder        @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId String               @db.ObjectId
  reason          String?
  createdAt       DateTime             @default(now())
  items           PurchaseReturnItem[]
}

model PurchaseReturnItem {
  id                  String            @id @default(auto()) @map("_id") @db.ObjectId
  purchaseReturn      PurchaseReturn    @relation(fields: [purchaseReturnId], references: [id])
  purchaseReturnId    String            @db.ObjectId
  purchaseOrderItem   PurchaseOrderItem @relation(fields: [purchaseOrderItemId], references: [id])
  purchaseOrderItemId String            @db.ObjectId
  quantity            Int
  note                String?
  createdAt           DateTime          @default(now())
}

model InventoryTransaction {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  product             Product  @relation(fields: [productId], references: [id])
  productId           String   @db.ObjectId
  kind                String // STOCK_IN | STOCK_OUT | RETURN_IN | RETURN_OUT | ADJUSTMENT | PO_ON_ORDER
  purchaseOrderId     String?  @db.ObjectId
  purchaseOrderItemId String?  @db.ObjectId
  purchaseReturnId    String?  @db.ObjectId
  quantity            Int
  unitPrice           Float?
  note                String?
  createdAt           DateTime @default(now())

  @@index([productId])
  @@index([purchaseOrderId])
}